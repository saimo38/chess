import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

public class SquarePanel extends JPanel {

    private int row;
    private int col;
    private Color color;
    private Color oppositeColor;
    private JLabel topLeft;
    private JLabel bottomRight;

    private BufferedImage pieceImage;
    private Piece currentPiece;
    private boolean highlighted;
    private boolean legalMoveHighlighted;
    private boolean checkHighlighted;


    public SquarePanel(int row, int col) {
        this.row = row;
        this.col = col;
        setLayout(null);

        if ((row + col) % 2 == 0) {
            color = new Color(240, 217, 181);
            oppositeColor = new Color(181, 136, 99);
        } else {
            color = new Color(181, 136, 99);
            oppositeColor = new Color(240, 217, 181);
        }

        if (col == 0) {
            topLeft = new JLabel(String.valueOf(8 - row));
            topLeft.setForeground(oppositeColor);
            topLeft.setBounds(2, 2, 20, 20);
            add(topLeft);
        }

        if (row == 7) {
            char letter = (char) ('a' + col);
            bottomRight = new JLabel(String.valueOf(letter));
            bottomRight.setForeground(oppositeColor);
            bottomRight.setBounds(42, 42, 20, 20);
            add(bottomRight);
        }

        setBackground(getColor());
        setPreferredSize(new Dimension(64, 64));

        addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                Container parent = getParent();
                while (parent != null && !(parent instanceof BoardPanel)) {
                    parent = parent.getParent();
                }
                if (parent instanceof BoardPanel board) {
                    board.handleSquareClick(getRow(), getCol());
                }
            }
        });
    }


    @Override
    public void setBounds(int x, int y, int width, int height) {
        super.setBounds(x, y, width, height);
        resizeLabels();
        repaint();
    }

    public void resizeLabels() {
        int width = getWidth();
        int height = getHeight();

        int fontSize = height / 5;
        Font font = new Font("Arial", Font.BOLD, fontSize);
        FontMetrics metrics = getFontMetrics(font);

        if (topLeft != null) {
            topLeft.setFont(font);
            int textW = metrics.stringWidth(topLeft.getText());
            int textH = metrics.getHeight();
            topLeft.setBounds(4, 2, textW, textH);
        }

        if (bottomRight != null) {
            bottomRight.setFont(font);
            int textW = metrics.stringWidth(bottomRight.getText());
            int textH = metrics.getHeight();
            bottomRight.setBounds(width - textW - 4, height - textH - 2, textW, textH);
        }

        repaint();
    }

    public void setPiece(Piece piece) {
        currentPiece = piece;

        if (piece != null) {
            int width = Math.max(getWidth(), 64);
            int height = Math.max(getHeight(), 64);
            pieceImage = SvgLoader.loadSvg(piece.getSvgPath(), width, height);
        } else {
            pieceImage = null;
        }

        repaint();
    }

    //this method was generated by chat gpt
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g.create();

        int width = getWidth();
        int height = getHeight();

        if (currentPiece != null) {
            if (pieceImage == null || pieceImage.getWidth() != width || pieceImage.getHeight() != height) {
                pieceImage = SvgLoader.loadSvg(currentPiece.getSvgPath(), width, height);
            }

            if (pieceImage != null) {
                g2d.drawImage(pieceImage, 0, 0, width, height, null);
            }
        }

        if (legalMoveHighlighted) {
            int dotSize = Math.min(getWidth(), getHeight()) / 6;
            int dotX = (getWidth() - dotSize) / 2;
            int dotY = (getHeight() - dotSize) / 2;

            g2d.setColor(new Color(50, 150, 50, 180));
            g2d.fillOval(dotX, dotY, dotSize, dotSize);
        }

        g2d.dispose();
    }

    public int getRow() {
        return row;
    }

    public int getCol() {
        return col;
    }

    public Color getColor() {
        if ((row + col) % 2 == 0) {
            color = new Color(240, 217, 181);
            return color;
        } else {
            oppositeColor = new Color(181, 136, 99);
            return oppositeColor;
        }
    }

    public void highlight(boolean value) {
        highlighted = value;
        setBackground(getColor());
        if (highlighted && getColor() == color) {
            setBackground(new Color(220, 220, 80));
        } else if (highlighted && getColor() == oppositeColor) {
            setBackground(new Color(200, 190, 40));
        }
    }

    public void highlightKingCheck(boolean value) {
        checkHighlighted = value;
        if (checkHighlighted) {
            setBackground(Color.red);
        } else {
            setBackground(getColor());
        }
        repaint();
    }


    public void highlightLegal(boolean value) {
        legalMoveHighlighted = value;
        repaint();
    }
}
